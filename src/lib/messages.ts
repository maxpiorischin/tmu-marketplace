/** this file is automatically generated, do not edit **/

export type ChatUser = { id: string; email: string };
export type ServerMessage = { type: "Pong" } | { type: "Authenticated" } | ({ type: "Error" } & ServerErrors) | { type: "UserMeta"; user: ChatUser } | { type: "BulkUsers"; users: ChatUser[] } | { type: "BulkMessages"; participants: string[]; messages: ChatMessage[] } | { type: "DirectMessage"; participants: string[]; message: ChatMessage };
export type ServerErrors = "Internal" | "Unauthorized" | "AlreadyAuthenticated" | "InvalidUuid" | "InvalidSecret" | "InvalidMessage" | "InvalidUser" | "RateLimited";
export type ClientMessage = { type: "Ping" } | { type: "Disconnect" } | { type: "Authenticate"; id: string; secret: string } | { type: "SyncChat"; with: string } | { type: "DirectMessage"; to: string; message: string } | { type: "SetTopic"; to: string; topic: string } | { type: "UserMeta"; with: string } | { type: "SyncChatUsers" };
export type ChatMessage = { type: "User"; from: string; message: string } | { type: "Topic"; topic: string } | { type: "Server"; message: string };

export type ClientMessageTypes = ClientMessage["type"];
export type ServerMessageTypes = ServerMessage["type"];
export type ChatMessageTypes = ChatMessage["type"];
export type ServerMessageMap<T extends ServerMessageTypes> = Omit<Extract<ServerMessage, { type: T }>, 'type'>;
export type ClientMessageMap<T extends ClientMessageTypes> = Omit<Extract<ClientMessage, { type: T }>, 'type'>;
