use std::io::Write;

use serde::{Deserialize, Serialize};
use specta::Type;

#[derive(Type, Clone, Debug, Serialize)]
#[serde(tag = "type")]
pub enum ServerMessage {
    Pong,
    Authenticated,

    Error(ServerErrors),

    BulkMessages {
        from: String,
        messages: Vec<ChatMessage>,
    }, // Send a bulk of messages to the client (chat history)
    DirectMessage {
        message: ChatMessage,
    }, // Send a single message to the client
}

#[derive(Type, Clone, Debug, Serialize)]
pub enum ServerErrors {
    Internal,
    Unauthorized,
    AlreadyAuthenticated,
    InvalidUuid,
    InvalidSecret,
    InvalidMessage,
    InvalidUser,
    RateLimited,
}

#[derive(Type, Clone, Debug, Serialize, Deserialize)]
#[serde(tag = "type")]
pub enum ClientMessage {
    Ping,

    Disconnect,                                    // Disconnect from the server
    Authenticate { id: String, secret: String },   // Authenticate the user
    SyncChat { with: String },                     // Sync chat with a user (ask for chat history)
    DirectMessage { to: String, message: String }, // Send a message to a user
}

#[derive(Type, Clone, Debug, Serialize)]
#[serde(tag = "type")]
pub enum ChatMessage {
    User { from: String, message: String }, // A message from a user
    Topic { topic: String },                // What the topic of the chat is
    Server { message: String },             // A message from the server
}

macro_rules! specta_buffer {
    {$($types:ty)|* ,$s:expr} => {
        {
            let mut buffer = String::from("/** this file is automatically generated, do not edit **/\n\n");
            $(buffer += &specta::ts::export::<$types>(&Default::default()).expect("Failed to export types"); buffer += ";\n";)*
            buffer += $s;
            buffer
        }
    };
}

pub fn export_types() {
    let path = std::path::Path::new("../../src/lib/messages.ts");

    if path.exists() {
        std::fs::remove_file(path).expect("Failed to remove old messages.ts");
    }

    let definitions = specta_buffer! {
        ServerMessage | ServerErrors | ClientMessage | ChatMessage,
        r#"
export type ClientMessageTypes = ClientMessage["type"];
export type ServerMessageTypes = ServerMessage["type"];
export type ChatMessageTypes = ChatMessage["type"];
export type ServerMessageMap<T extends ServerMessageTypes> = Omit<Extract<ServerMessage, { type: T }>, 'type'>;
export type ClientMessageMap<T extends ClientMessageTypes> = Omit<Extract<ClientMessage, { type: T }>, 'type'>;
"#
    };

    let mut file = std::fs::File::create(path).expect("Failed to create messages.ts");
    file.write_all(definitions.as_bytes())
        .expect("Failed to write to messages.ts");

    println!("Exported types to messages.ts");
}
